 #파이썬은 0 1 2 3 순서로 수를 셈(-로 가면 뒤에서부터 앞으로 돌아옴 -1은 맨뒤의 것)
 #type(변수) 변수의 자료형을 반환
 #변수선언 =>객체생성 =>변수값은 객체의 메모리 주소를 가짐. id(a) 주소찾는 함수
    #변수를 가져오는 경우 
        #a=b하면 a가 바뀌면 b도 바뀜=> b=a[:] 를 하면 전체를 복사! 한것이라 원본과 관계 없어짐
        #b= copy(a) == b=a[:] == b=a.copy()
# 미쳤다 a,b=b,a 하면 값 바뀜 대박대박

 #숫자형
    #실수형
    #정수형
    #8진수 0O or 0o
    #16진수 0x

    #+ - * / 현실과 같음
    #a**b a의 b승
    #% 나머지 연산자
    #// 몫(정수)반환

#문자열 "",'',""" """,''' '''
    #"나 '를 사용시 교차사용하여 오류 방지 가능
    #아얘 \" \'와 같이 문자열에 포함 가능
    #줄바꾸기 \n, ''' ''', """ """
    #문자열 더하기 => 문자열 차례대로 나열
    #문자열 곱하기 => 문자열 반복
    #문자열 길이 len(문자열) =>정수로
    #a[5] =>a문자열의 6번째 있는 문자를 보여줌

    #슬라이싱
        # a[0:5] =>각각을 더해도 되지만 구간을 발췌가능 (슬라이싱 기법)(끝번호는 포함 안하니 주의)
        #     a[:5],a[5:]와 같이 한쪽 오픈가능 a[:]전체 발췌
        #     문자열의 요솟 값은 바꿀수 없으니 유의
    #문자열에 변수넣기
        #%s 문자열(자동으로 문자열화), %d 정수, %f 부동소수, %c 문자1개캐릭터, %% (진짜 퍼센트 문자),%o 8진수,%x 16진수
        #"%s"%a, "%s" % (a,b,c)
        #%(칸수,-는 왼쪽 정렬).(소수점 자릿수)f
    #format함수를 이용한 포매팅
        #"{0}{1}{2}".format(0,1,2)
        #"{a}{b}{c}".format(c=12,a=k,b=99) 순서 바뀌어도 ok,인덱스랑 혼용 가능.
        #{인덱스:=<10} <왼쪽 정렬, 10자릿수 >오른쪽 정렬, ^중앙정렬, =공백 채우기(생략시 띄어쓰기)
        #"{0:0.4f}".format(y) 소수점 처리
        #f'' 와 같이 문자열 앞의 f사용하면 format사용표기로 변수 기능 사용가능
        #f'{"hi":<10}'와 같이 '{}'로 감싸서 :<10으로 정렬 가능
        #{d["name"]}과 같이 딕셔너리 기능 혼용 사용가능
    #문자 개수 세기 .count()
    #처음만난 문자위치 .find() 존재하지 않으면 -1반환
    #처음만난 문자위치 .index() 존재하지 않으면 오류
    #문자열 삽입     끼워넣을 문자열.join(대상)
        #join사용하여 리스트 병합 가능!!!
    #대문자로 바꾸기 .upper()
    #소문자로 바꾸기 .lower()
    #양쪽 공백지우기 .strip() 왼쪽은 l 오른쪽은 r붙이면 됨
    #문자열 교체 .replace(대상,새문자열)
    #문자열 나누기 .split(나눌단위)
#형 변환
    # str()   #문자로 바꾸기
    # int()   #int형 정수로 바꾸기
#리스트[]
    #이름=[내용물,내용물] 이름=list()로 생성가능
    #리스트는 연산가능하다,반복가능하다
    #del a[1] 함수로 리스트 요소 삭제 가능 [2:]사용가능
    #.remove(x) 처음 나오는 x삭제
    #.append() 함수로 요소 맨 마지막에 추가
    #.insert(위치,값) 위치에 값 삽입
    #.sort() 리스트의 요소 순서대로 정렬
    #.reverse() 리스트의 요소의 순서를 역으로 바꿈(역정렬아님)
    #.index(x) x값의 위치 반환
    #.pop() 마지막값 반환후 삭제 .pop(x) x번째 요소
    #.count(x) 리스트안에 x의 갯수 반환
    #.extend(새리스트) 기존의 리스트에 새 리스트 추가

#튜플()(값을 바꿀수 없다, 그외에는 리스트와 사용법이 동일)

#딕셔너리  {Key1:Value1, Key2:Value2, Key3:Value3, ...}
    #key는 불변, value는 불변 가변 둘다 가능.
    #key는 중복 금지. 리스트 사용 불가능
    #value에 문자열, 리스트 다 가능.
    #딕셔너리 추가법 a['name'] = 'hoho'
    #반출법 a['키'] 없는경우 오류 or a.get('키') 없는경우 None(거짓)값 반환
    #get(x, '디폴트 값') x가 없는 경우 디폴트값 반환
    #딕셔너리 요소삭제 del a[key]
    #딕셔너리 전부삭제 .clear()
    #딕셔너리변수이름[Key] =>value값 반환
    #.keys() 키값의 모음을 보여줌. list(a.keys()) 로 리스트 형태 가능
    #.values() value값의 모음
    #.items() key와 value값 쌍으로 반환
    #'name' in 딕셔너리     키 확인법

#집합{}
    #이름=set([1,2,3]) => {1,2,3}
        #문자열은 문자하나씩 집합처리
        #중복 허용 X, 순서가 없다(리스트 튜플 순서있음)
    #교집합 &, 합집합 | or a.union(b), 차집합 -
    #.add(값) 1개추가할때
    #.ipdate(리스트나 튜플) 여러개의 값을 추가할때
    #.remove(값) 특정값의 제거

#bool자료형 불 자료형 (참 거짓만을 나타내는 자료형)
    #파이썬은 True, False 첫글자 대문자꼭!!
    #참거짓을 변수에 지정하면 =>bool자료형으로 지정됨
    #0 None 공란 =>False, 뭔가 있음 =>True




# \n	문자열 안에서 줄을 바꿀 때 사용
# \t	문자열 사이에 탭 간격을 줄 때 사용
# \\	문자 \를 그대로 표현할 때 사용
# \'	작은따옴표(')를 그대로 표현할 때 사용
# \"	큰따옴표(")를 그대로 표현할 때 사용
# \r	캐리지 리턴(줄 바꿈 문자, 현재 커서를 가장 앞으로 이동)
# \f	폼 피드(줄 바꿈 문자, 현재 커서를 다음 줄로 이동)
# \a	벨 소리(출력할 때 PC 스피커에서 '삑' 소리가 난다)
# \b	백 스페이스
# \000	널 문자





#문자열에 변수넣기
    #%s 문자열, %d 정수, %f 부동소수, %c 문자1개캐릭터, %% (진짜 퍼센트 문자)
    #"%s"%a


#str() 스트링처리